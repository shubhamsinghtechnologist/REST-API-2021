                              Steps to run this project on Local Machine
                              ------------------------------------------

Step 1st: npm install (To download all the required node modules, Internet is required.)
--------

Step 2nd: Add .env file in your root directory and add few variables with your value,
---------
PORT = 4000
MONGO_DB_USER = yourMongoDatabaseUserName
MONGO_DB_PASSWORD = yourMongoDatabasePassword
MONGO_DB_DATABASE = yourDatabaseName (which you want to create for this project)


Step 3nd: npm start (To run project)
--------

---------------------------------------------------------------------------------------------------------------------
**********************************************************************************************************************

Why we used Express? : Express is one of the most popular web frameworks for Node.js that supports routing, middleware, view system. It is Fast, unopinionated and minimalist web framework for node. Command - npm i express

Why we used Mongoose? : Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment. Mongoose supports both promises and callbacks - command: npm i mongoose

Why we used dotenv? : Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.
- command: npm i dotenv

Why we use cors? : CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options. command - npm i cors

Why we use nodemon? : nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected. nodemon does not require any additional changes to your code or method of development. nodemon is a replacement wrapper for node. To use nodemon, replace the word node on the command line when executing your script. command - npm i nodemon --save-dev

--------------------------------------------------------------------------------------------------------------------
                        Node.js MongoDB Rest todo API overview
                        **************************************
We will build Rest Apis that can create, retrieve, update, delete and find Todos by title.

First, we start with an Express web server. Next, we add configuration for MongoDB database, create Todo model with Mongoose, write the controller. Then we define routes for handling all todo operations (including custom finder).

The following shows overview of the Rest APIs that will be exported:

// Create New Todo (POST)
router.post('/createTodo', addNewTodo);

// Fetch All Todos (GET)
router.get('/fetchAllTodos', fetchAllTodos);

// Fetch Todo based on id (GET)
router.get('/fetchTodo/:id', fetchTodoById);

// Fetch All published true Todos (GET)
router.get('/fetchPublishedTodos', fetchAllPublishedTodos);

// Update Todo based on id (GET)
router.put('/updateTodo/:id', updateTodoById);

// Delete Todo based on id (DELETE)
router.delete('/deleteTodo/:id', deleteSingleTodo);

// Delete all Todo (DELETE)
router.delete('/deleteAllTodos', deleteAllTodos);

Finally, we’re gonna test the Rest Apis using Postman.
--------------------------------------------------------------------------------------
Important Steps:
----------------

Create Node.js App
First, we create a folder:

$ mkdir todo-app-backend
$ cd todo-app-backend
--------------------------------------------------------------------------------------
Next, we initialize the Node.js App with a package.json file:

npm init

name: (todo-app-backend) 
version: (1.0.0) 
description: Node.js Restful todo API with Node.js, Express and MongoDB
entry point: (index.js) server.js
test command: 
git repository: 
keywords: nodejs, express, mongodb, rest, api
author: Shubham Singh
license: (ISC)

Is this ok? (yes) yes

package.json look like this:

--------------------------------------------------------------------------------------
We need to install necessary modules: express, mongoose, dotenv, nodemon and cors.
Run the command:

npm i express mongoose cors dotenv
npm i nodemon --save-dev

{
  "name": "todo-app-backend",
  "version": "1.0.0",
  "description": "Node.js Restful Todos API with Node.js, Express and MongoDB",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon index.js"
  },
  "keywords": [
    "todo App",
    "nodejs",
    "express",
    "mongodb",
    "rest",
    "api"
  ],
  "author": "Shubham Singh",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "mongoose": "^5.12.14"
  },
  "devDependencies": {
    "nodemon": "^2.0.7"
  }
}
--------------------------------------------------------------------------------------
Setup Express web server
In the root folder, let’s create a new index.js file:

What we do are:
– import express, dotenv, mongoose and cors modules:

Express is for building the Rest apis
cors provides Express middleware to enable CORS with various options.

– create an Express app, then add body-parser (json and urlencoded) and cors middlewares using app.use() method. 
Notice that we set origin: http://localhost:4000.

– define a GET route which is simple for test.
– listen on port 3000 for incoming requests.

Now let’s run the app with command: node server.js.
Open your browser with url http://localhost:4000/, you will see the output:
Yeah, the first step is done. We’re gonna work with Mongoose in the next section.
--------------------------------------------------------------------------------------------------------------------------------
Configure MongoDB database & Mongoose
In the app folder, we create a separate databse > config folder for configuration with db.config.js file like this:

// Mongo Database Connection
const mongoose = require('mongoose');

// Local Compass URL: 'mongodb://localhost:27017/todo-app',
mongoose.connect(`mongodb+srv://${process.env.MONGO_DB_USER}:${process.env.MONGO_DB_PASSWORD}@shubham-cluster.p0zxy.mongodb.net/${process.env.MONGO_DB_DATABASE}`, {
    useUnifiedTopology: true,
    useNewUrlParser: true
}).then(()=>{
    console.log(`Database is successfully connected`);
}).catch((error) => {
    console.log(`Getting error while connecting database: ${error}`);
});
-----------------------------------------------------------------------------------------------------------------

Define the Mongoose Model
In models folder, create Todo.model.js file like this:

const mongoose = require('mongoose');

let TodoSchema = new mongoose.Schema({
title: {
    type: String,
    required: true,
    trim: true,
    minlength: 5,
    maxlength: 100
},
description: {
    type: String,
    required: true,
    trim: true,
    minlength: 10,
    maxlength: 500
},
published: {
    type: Boolean
}
},{
timestamps : true
});

module.exports = mongoose.model("Todo", TodoSchema); //First Parameter is Collection (table) Name and 2nd is schema.
--------------------------------------------------------------------------------------------------------------------------------
This Mongoose Model represents Todos collection in MongoDB database. These fields will be generated automatically for each Todo document: _id, title, description, published, createdAt, updatedAt, __v.

{
"_id": "5e363b135036a835ac1a7da8",
"title": "Js Tut#",
"description": "Description for Tut#",
"published": true,
"createdAt": "2020-02-02T02:59:31.198Z",
"updatedAt": "2020-02-02T02:59:31.198Z",
"__v": 0
}
--------------------------------------------------------------------------------------------------------------------------

After finishing the steps above, we don’t need to write todo functions, Mongoose Model supports all of them:

create a new Todo: object.save()
find a Todo by id: findById(id)
retrieve all Todos: find()
update a Todo by id: findByIdAndUpdate(id, data)
remove a Todo: findByIdAndRemove(id)
remove all Todos: deleteMany()
find all Todos by title: find({ title: { $regex: new RegExp(title), $options: “i” } })

These functions will be used in our Controller.

Create the Controller
Inside src/controllers folder, let’s create Todo.controller.js with these todo functions:

create
findAll
findOne
update
delete
deleteAll
findAllPublished
--------------------------------------------------------------------------------------------------------------------------

Define Routes
When a client sends request for an endpoint using HTTP request (GET, POST, PUT, DELETE), we need to determine how the server will reponse by setting up the routes.

These are Eight routes:

/api/createTodo                   POST
/api/fetchAllTodos                GET
/api/fetchTodo/:id                GET
/api/fetchPublishedTodos          GET
/api/updateTodo/:id               PUT
/api/deleteTodo/:id               DELETE
/api/deleteAllTodos               DELETE
/api/fetchAllTodos/?title=Html    GET

--------------------------------------------------------------------------------------------------------------------------

Test the APIs
Run our Node.js application with command: nodemon index.js.

--------------------------------------------------- The End ---------------------------------------------------------------
